{"version":3,"sources":["utils/querystring.ts","constants.ts","pages/Login.tsx","utils/fetch.ts","redux/actions.ts","pages/OauthRedirect.tsx","redux/reducer.ts","components/Pages.tsx","components/Playlists.tsx","components/AnalysisBoxPlot.tsx","pages/PlaylistAnalysis.tsx","App.tsx","createStore.ts","serviceWorker.ts","index.tsx"],"names":["buildQueryString","params","map","kvp","encodeURIComponent","key","value","join","host","spotifyClientId","props","spotifyUrl","onButtonClick","e","preventDefault","window","location","href","queryString","onClick","this","React","Component","spotifyFetch","accessToken","input","init","spotifyFullFetch","options","headers","Headers","Authorization","fetch","authTokenReceived","createAction","authToken","OauthRedirect","state","user","getUserDetails","a","hash","split","accessTokenKvp","res","json","setState","display_name","saveAuthToken","to","connect","undefined","dispatch","handleActions","action","payload","expiry","Pages","fetchNewResult","api","paging","onNewResult","apiCall","result","previousPage","previous","nextPage","next","prevButton","style","minWidth","nextButton","isFirstPage","offset","hasMorePages","limit","total","display","marginTop","flex","app","Albums","onPageChange","stupidHack","apiResult","playlists","selectedPlaylist","items","playlist","className","id","onPlaylistSelected","name","owner","allPlotData","prop","audioFeatures","x","y","audioFeature","getPlotData","domainPadding","width","height","boxWidth","whiskerWidth","data","PlaylistAnalysis","ids","record","track","audioFeaturesUrl","audioFeaturesCall","audioFeaturesResult","audio_features","average","reduce","acc","curr","length","mapKeyToString","0","1","2","3","4","5","6","7","8","9","10","11","12","Math","ceil","asPercentage","toFixed","Playlists","AnalysisBoxPlot","App","store","createStore","combineReducers","reducer","__REDUX_DEVTOOLS_EXTENSION__","exact","path","component","Login","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45008499.chunk.js","sourcesContent":["export interface QueryStringParam {\r\n    key: string;\r\n    value: string;\r\n}\r\n\r\nexport const buildQueryString = (params: Array<QueryStringParam>) => {\r\n    return params.map(kvp => encodeURIComponent(kvp.key) + \"=\" + encodeURIComponent(kvp.value)).join(\"&\");\r\n}","export const host = \"https://www.runelit.net/spotifystats/\";\r\n\r\n// Not a secret btw\r\nexport const spotifyClientId = \"68ed51fb5e8b40f8ababf3ccb6563529\";","import React from \"react\";\r\nimport { QueryStringParam, buildQueryString } from \"../utils/querystring\";\r\nimport { host, spotifyClientId } from \"../constants\";\r\n\r\nexport default class extends React.Component {\r\n\r\n    private spotifyUrl: string;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        const params: QueryStringParam[] = [\r\n            { key: \"client_id\", value: spotifyClientId },\r\n            { key: \"response_type\", value: \"token\" },\r\n            { key: \"redirect_uri\", value: host + \"#/oauth\" },\r\n            //todo: state\r\n            { key: \"scope\", value: \"playlist-read-private \" }\r\n        ];\r\n\r\n        const queryString = buildQueryString(params);\r\n\r\n        this.spotifyUrl = \"https://accounts.spotify.com/authorize?\" + queryString;\r\n    }\r\n\r\n    onButtonClick = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        e.preventDefault();\r\n        window.location.href = this.spotifyUrl;\r\n    }\r\n\r\n    public render() {\r\n        return <div>\r\n            <p>Login to spotify first</p>\r\n            <button onClick={this.onButtonClick}>Log in to Spotify</button>\r\n        </div>;\r\n    }\r\n}","export const spotifyFetch = (accessToken: string, input: string, init?: RequestInit | undefined) => {\r\n\r\n    const url = \"https://api.spotify.com/v1/\" + input;\r\n    return spotifyFullFetch(accessToken, url, init);\r\n}\r\n\r\nexport const spotifyFullFetch = (accessToken: string, input: string, init?: RequestInit | undefined) => {\r\n\r\n    const options: RequestInit = {\r\n        ...init,\r\n        headers: new Headers({\r\n            Authorization: \"Bearer \" + accessToken\r\n        })\r\n    };\r\n\r\n    return fetch(input, options);\r\n}\r\n","import { createAction } from \"redux-actions\";\r\n\r\nexport const AUTH_TOKEN_RECEIVED = \"AUTH_TOKEN_RECEIVED\"; \r\n\r\nexport const authTokenReceived = createAction<string, string>(AUTH_TOKEN_RECEIVED, authToken => authToken);","import React from \"react\";\r\nimport { spotifyFetch } from \"../utils/fetch\"\r\nimport { authTokenReceived } from \"../redux/actions\";\r\nimport { Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    saveAuthToken: (authToken: string) => dispatch(authTokenReceived(authToken))\r\n});\r\n\r\ninterface IState {\r\n    user: string;\r\n}\r\n\r\nclass OauthRedirect extends React.Component<ReturnType<typeof mapDispatchToProps>, IState> {\r\n\r\n    readonly state: IState = {\r\n        user: \"\"\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getUserDetails();\r\n    }\r\n\r\n    getUserDetails = async () => {\r\n        const [accessTokenKvp,,,] = window.location.hash.split(\"&\");\r\n        const [, accessToken] = accessTokenKvp.split(\"=\");\r\n        //const [,expiresIn] = expiresInKvp.split(\"=\");\r\n        \r\n        const res = await spotifyFetch(accessToken as string, \"me\");\r\n        const json = await res.json();\r\n        this.setState({ user: json.display_name });\r\n        this.props.saveAuthToken(accessToken);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <p>Hi <b>{this.state.user || \"...\" }</b>, you logged in successfully</p>\r\n            <Link to=\"/playlists\">See playlists</Link>\r\n        </>;\r\n    }\r\n}\r\n\r\nexport default connect(undefined, mapDispatchToProps)(OauthRedirect);","import { GlobalState } from \"../models/states\";\r\nimport { handleActions, Action } from \"redux-actions\";\r\n\r\nimport * as actions from \"./actions\";\r\n\r\nconst initState: GlobalState = {\r\n    accessToken: \"\",\r\n    expiry: 0\r\n}\r\n\r\nexport default handleActions({\r\n    [actions.AUTH_TOKEN_RECEIVED]: (state: GlobalState, action: Action<string>) => {\r\n        return { ...state, accessToken: action.payload};\r\n    }\r\n}, initState);","import React from \"react\";\r\nimport { Paging } from \"../models/models\";\r\nimport { ReduxRoot } from \"../models/states\";\r\nimport { connect } from \"react-redux\";\r\nimport { spotifyFullFetch } from \"../utils/fetch\";\r\n\r\ninterface IProps<T> {\r\n    paging?: Paging<T>;\r\n    onNewResult: (newResult: Paging<T>) => void;\r\n}\r\n\r\nconst mapStateToProps = (state: ReduxRoot) => ({\r\n    accessToken: state.app.accessToken\r\n});\r\n\r\nclass Pages<T> extends React.Component<IProps<T> & ReturnType<typeof mapStateToProps>> {\r\n\r\n    fetchNewResult = async (api: string) => {\r\n        const { accessToken, paging, onNewResult } = this.props;\r\n        if(!paging) return;\r\n\r\n        const apiCall = await spotifyFullFetch(accessToken, api);\r\n        const result = await apiCall.json();\r\n\r\n        onNewResult(result);\r\n    }\r\n\r\n    previousPage = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        e.preventDefault();\r\n        if(!this.props.paging) return;\r\n        this.fetchNewResult(this.props.paging.previous);\r\n    }\r\n\r\n    nextPage = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        e.preventDefault();\r\n        if(!this.props.paging) return;\r\n        this.fetchNewResult(this.props.paging.next);\r\n    }\r\n\r\n    public render() {\r\n        const { paging } = this.props;\r\n        if(!paging) {\r\n            return <></>;\r\n        }\r\n\r\n        const prevButton = <button onClick={this.previousPage} style={{ minWidth: 80}}>Previous</button>\r\n        const nextButton = <button onClick={this.nextPage} style={{ minWidth: 80}}>Next</button>\r\n\r\n        const isFirstPage = paging.offset === 0;\r\n        const hasMorePages = paging.offset + paging.limit < paging.total;\r\n\r\n        return <div style={{ display: \"flex\", marginTop: 4 }}>\r\n            {!isFirstPage && prevButton}\r\n            <div style={{ flex: 1 }}></div>\r\n            {hasMorePages && nextButton}\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Pages);","import React from \"react\";\r\n\r\nimport { ReduxRoot } from \"../models/states\";\r\nimport { spotifyFetch } from \"../utils/fetch\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { Playlist, Paging } from \"../models/models\";\r\nimport Pages from \"../components/Pages\";\r\n\r\nconst mapStateToProps = (state: ReduxRoot) => ({\r\n    accessToken: state.app.accessToken\r\n});\r\n\r\ninterface IProps {\r\n    onPlaylistSelected: (playlist: Playlist) => void;\r\n    selectedPlaylist?: Playlist;\r\n}\r\n\r\ninterface IState {\r\n    paging?: Paging<Playlist>;\r\n}\r\n\r\nclass Albums extends React.Component<IProps & ReturnType<typeof mapStateToProps>, IState> {\r\n\r\n    readonly state: IState = {\r\n        paging: undefined\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const apiResult = await spotifyFetch(this.props.accessToken, \"me/playlists?limit=10\");\r\n        const playlists = await apiResult.json();\r\n        this.setState({ paging: playlists });\r\n    }\r\n\r\n    onPageChange = (paging: Paging<unknown>) => {\r\n        const stupidHack = paging as Paging<Playlist>;\r\n        this.setState({ paging: stupidHack });\r\n    }\r\n\r\n    public render() {\r\n        const { paging } = this.state;\r\n        const { selectedPlaylist } = this.props; \r\n\r\n        return <div>\r\n            {paging && paging.items.map(playlist => (\r\n            <div \r\n                className={\"playlist\" + ((selectedPlaylist && selectedPlaylist.id === playlist.id) ? \" active\" : \"\")} \r\n                key={playlist.id} \r\n                onClick={() => this.props.onPlaylistSelected(playlist)}\r\n            >\r\n                <b>{playlist.name}</b>\r\n                <br/>\r\n                Created by: {playlist.owner.display_name}\r\n            </div>))}\r\n            <Pages paging={paging} onNewResult={this.onPageChange} />\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Albums);","import React from \"react\";\r\nimport { AudioFeatures } from \"../models/models\";\r\nimport { VictoryChart, VictoryBoxPlot} from \"victory\";\r\n\r\nconst getPlotData = (prop: keyof AudioFeatures, audioFeatures: AudioFeatures[]) => {\r\n    return { x: prop, y: audioFeatures.map(audioFeature => audioFeature[prop]) };\r\n}\r\n\r\n\r\nexport default (props: { audioFeatures: AudioFeatures[] }) => {\r\n    \r\n    const measuredProps = [\"danceability\", \"acousticness\", \"energy\", \"liveness\", \"speechiness\", \"valence\"] as Array<keyof AudioFeatures>\r\n    \r\n    const allPlotData = measuredProps.map(prop => getPlotData(prop, props.audioFeatures));\r\n\r\n    return <VictoryChart domainPadding={10} width={800} height={300}>\r\n        <VictoryBoxPlot \r\n            \r\n            boxWidth={10}\r\n            whiskerWidth={5}\r\n            data={allPlotData}\r\n        />\r\n    </VictoryChart>\r\n}","import React from \"react\";\r\n\r\nimport { Playlist, Paging, AudioFeaturesList, AudioFeatures } from \"../models/models\";\r\nimport { ReduxRoot } from \"../models/states\";\r\n\r\nimport { spotifyFetch } from \"../utils/fetch\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Playlists from \"../components/Playlists\";\r\nimport AnalysisBoxPlot from \"../components/AnalysisBoxPlot\";\r\n\r\nconst mapStateToProps = (state: ReduxRoot) => ({\r\n    accessToken: state.app.accessToken\r\n})\r\n\r\ninterface IState {\r\n    audioFeatures: AudioFeatures[];\r\n    selectedPlaylist?: Playlist;\r\n}\r\n\r\nclass PlaylistAnalysis extends React.Component<ReturnType<typeof mapStateToProps>, IState> {\r\n\r\n    readonly state: IState = {\r\n        audioFeatures: [],\r\n        selectedPlaylist: undefined\r\n    }\r\n    \r\n    onPlaylistSelected = async (playlist: Playlist) => {\r\n        const { accessToken } = this.props;\r\n        const apiCall = await spotifyFetch(accessToken, `playlists/${playlist.id}/tracks?limit=100`);\r\n        const result: Paging<any> = await apiCall.json();\r\n        \r\n\r\n        const ids = result.items.map(record => record.track.id).join(\",\");\r\n        const audioFeaturesUrl = \"audio-features?ids=\" + ids;\r\n\r\n        const audioFeaturesCall = await spotifyFetch(accessToken, audioFeaturesUrl);\r\n        const audioFeaturesResult: AudioFeaturesList = await audioFeaturesCall.json();\r\n        \r\n        this.setState({ audioFeatures: audioFeaturesResult.audio_features, selectedPlaylist: playlist });\r\n    }\r\n\r\n    average = (prop: keyof AudioFeatures, audioFeatures: AudioFeatures[]): number => {\r\n        return audioFeatures.reduce((acc, curr) => acc += curr[prop], 0)  / audioFeatures.length;\r\n    }\r\n\r\n    mapKeyToString = (key: number) => {\r\n        return ({\r\n            0: \"C\",\r\n            1: \"C♯/D♭\",\r\n            2: \"D\",\r\n            3: \"D♯/E♭\",\r\n            4: \"E\",\r\n            5: \"F\",\r\n            6: \"F♯/G♭\",\r\n            7: \"G\",\r\n            8: \"G♯/A♭\",\r\n            9: \"A\",\r\n            10: \"A♯/B♭\",\r\n            11: \"B\",\r\n            12: \"C\"\r\n        } as {[idx: number]: string})[Math.ceil(key)];\r\n    }\r\n\r\n    asPercentage = (value: number) => {\r\n        return ((value) * 100).toFixed(2) + \"%\";  \r\n    }\r\n    \r\n    public render() {\r\n        const { audioFeatures, selectedPlaylist} = this.state;\r\n        return <>\r\n            <h3>Playlists</h3>\r\n            <div id=\"playlistResult\">\r\n                <div id=\"playlists\">\r\n                    <Playlists onPlaylistSelected={this.onPlaylistSelected} selectedPlaylist={selectedPlaylist}/>\r\n                </div>\r\n                <div id=\"analysis\">\r\n                    {selectedPlaylist && <div>\r\n                        <p>Selected playlist: <b>{selectedPlaylist.name}</b></p>\r\n                        <p>Averages for the first 100 songs</p>\r\n                        <p>Danceability: {this.asPercentage(this.average(\"danceability\", audioFeatures))}</p>\r\n                        <p>Tempo: {this.average(\"tempo\", audioFeatures).toFixed(0)} BPM</p>\r\n                        <p>Acousticness: {this.asPercentage(this.average(\"acousticness\", audioFeatures))}</p>\r\n                        <p>Duration in seconds: {(this.average(\"duration_ms\", audioFeatures) / 1000).toFixed(2)}</p>\r\n                        <p>Energy: {this.asPercentage(this.average(\"energy\", audioFeatures))}</p>\r\n                        <p>Key: {this.mapKeyToString(this.average(\"key\", audioFeatures))}</p>\r\n                        <p>Liveness: {this.asPercentage(this.average(\"liveness\", audioFeatures))}</p>\r\n                        <p>Loudness: {this.average(\"loudness\", audioFeatures).toFixed(2)}</p>\r\n                        <p>Mode (0 = minor, 1 = major): {this.average(\"mode\", audioFeatures).toFixed(2)}</p>\r\n                        <p>Speechiness: {this.asPercentage(this.average(\"speechiness\", audioFeatures))}</p>\r\n                        <p>Time signature: {this.average(\"time_signature\", audioFeatures)}</p>\r\n                        <p>Valence (0 = sad, depressing & 1 = happy, cheerful): {this.asPercentage(this.average(\"valence\", audioFeatures))}</p>\r\n                    </div>}\r\n                </div>\r\n            </div>\r\n            {selectedPlaylist && <div>\r\n                <AnalysisBoxPlot audioFeatures={audioFeatures} />    \r\n            </div>}\r\n        </>;\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(PlaylistAnalysis);","import React from 'react';\nimport './App.css';\nimport { HashRouter, Route } from \"react-router-dom\"\nimport Login from './pages/Login';\nimport OauthRedirect from \"./pages/OauthRedirect\";\nimport createStore from \"./createStore\";\nimport { Provider } from \"react-redux\";\n\nimport PlaylistAnalysis from \"./pages/PlaylistAnalysis\";\n\nconst App: React.FC = () => {\n\n    return (\n        <div id=\"app\">\n            <Provider store={createStore()}>\n                <HashRouter>\n                    <Route exact path=\"/\" component={Login}  />\n                    <Route path=\"/access_token:lol\" component={OauthRedirect} />\n                    <Route exact path=\"/playlists\" component={PlaylistAnalysis} />\n                </HashRouter>\n            </Provider>\n        </div>\n    );\n}\n\nexport default App;\n\n/**\n * Stats over time\n * - \n */","import { createStore, combineReducers } from 'redux';\r\nimport reducer from \"./redux/reducer\";\r\n\r\ndeclare const window: any;\r\n\r\nexport default function configureStore() {\r\n    return createStore(\r\n        combineReducers({ app: reducer }),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}